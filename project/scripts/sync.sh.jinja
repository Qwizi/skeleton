#!/usr/bin/env bash
# (C) 2023â€“present Bartosz SÅ‚awecki (bswck)
#
# Sync with bswck/skeleton.
# This script was adopted from https://github.com/bswck/skeleton/tree/{{_copier_answers['_commit']}}/project/scripts/sync.sh.jinja
#
# Usage:
# $ poe sync

#% with sync_script=True %#
#%- filter indent(width=0) -%#
#%- include "handle-task-event.sh" -%#
#%- endfilter -%#
#% endwith %#

determine_new_ref() {
    # Determine the new skeleton revision set by the child process
    export NEW_REF
    NEW_REF=$(redis-cli get "$NEW_REF_KEY")
}

before_update_algorithm() {
    # Stash changes if any
    if test "$(git diff --name-only | grep "")"
    then
        echo "There are uncommitted changes in the project."
        git stash push --message "Stash before syncing with {{_copier_answers['_src_path']}}"
        DID_STASH=1
    else
        echo "Working tree clean, no need to stash."
    fi
}

run_update_algorithm() {
    # Run the underlying update algorithm
    copier update --trust --vcs-ref "${1:-"HEAD"}"
    determine_new_ref
    determine_project_path
}

after_update_algorithm() {
    # Run post-update hooks, auto-commit and push changes
    cd "$PROJECT_PATH" || exit 1

    echo "Previous skeleton revision: $LAST_REF"
    echo "Current skeleton revision: ${NEW_REF:-"N/A"}"

    local REVISION_PARAGRAPH="Skeleton revision: https://github.com/bswck/skeleton/tree/${NEW_REF:-"HEAD"}"

    git add .
    if test "$LAST_REF" = "$NEW_REF"
    then
        echo "The version of the skeleton has not changed."
        local COMMIT_MSG="Patch {{_copier_conf.answers_file}} at bswck/skeleton@$NEW_REF"
    else
        if test "$NEW_REF"
        then
            local COMMIT_MSG="Upgrade to bswck/skeleton@$NEW_REF"
        else
            local COMMIT_MSG="Upgrade to bswck/skeleton of unknown revision"
        fi
    fi
    while test "$(git diff --check | grep "")"
    do
        echo "Cannot commit with the following conflicts:"
        git diff --check
        echo "Please resolve the conflicts and press Enter to continue."
        read -r
    done
    redis-cli del "$PROJECT_PATH_KEY" > /dev/null 2>&1
    redis-cli del "$NEW_REF_KEY" > /dev/null 2>&1
    git commit --no-verify -m "$COMMIT_MSG" -m "$REVISION_PARAGRAPH"
    git push --no-verify
    toggle_workflows
    if test "$DID_STASH"
    then
        echo "Unstashing changes..."
        git stash pop && echo "Done!"
    fi
}

main() {
    export LAST_REF="{{_copier_answers['_commit']}}"
    export PROJECT_PATH_KEY="$$_skeleton_project_path"
    export NEW_REF_KEY="$$_skeleton_new_ref"
    export LAST_LICENSE_NAME="{{_copier_answers['license_name']}}"

    cd "${PROJECT_PATH:=$(git rev-parse --show-toplevel)}" || exit 1
    echo
    echo "--- Last skeleton revision: $LAST_REF"
    echo
    echo "UPDATE ROUTINE [1/3]: Running pre-update hooks."
    echo "[---------------------------------------------]"
    before_update_algorithm
    echo "[---------------------------------------------]"
    echo "UPDATE ROUTINE [1/3] COMPLETE. âœ…"
    echo
    echo "UPDATE ROUTINE [2/3]: Running the underlying update algorithm."
    echo "[------------------------------------------------------------]"
    run_update_algorithm "$@"
    echo "[------------------------------------------------------------]"
    echo "UPDATE ROUTINE [2/3] COMPLETE. âœ…"
    echo
    echo "--- Project path: $PROJECT_PATH"
    echo
    echo "UPDATE ROUTINE [3/3]: Running post-update hooks."
    echo "[----------------------------------------------]"
    after_update_algorithm
    echo "[----------------------------------------------]"
    echo "UPDATE ROUTINE [3/3] COMPLETE. âœ…"
    echo
    echo "Done! ðŸŽ‰"
    echo
    echo "Your repository is now up to date with this bswck/skeleton revision:"
    echo "https://github.com/bswck/skeleton/tree/${NEW_REF:-"HEAD"}"
}

main "$@"