[tool.poetry]
name = "{{repo_name}}"
version = "0.0.0"
description = "{{pypi_project_description}}"
authors = ["{{author_username}} <{{email_address}}>"]
license = "{{license_name}}"
readme = "README.md"
packages = [{ include = "{{package_name}}/" }]
homepage = "{{repo_url}}"

[tool.poetry.urls]
#%- if docs %#
Documentation = "{{docs_url}}"
#%- endif %#
Issues = "{{repo_url}}/issues"
#%- if publish_on_pypi %#
Distribution = "{{pypi_url}}"
#%- endif %#
#%- if visibility == "public" %#
Coverage = "{{coverage_url}}"
#% endif %#

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.group.dev.dependencies]
mypy = "^1.7.0"
ruff = "^0.1.2"
#%- if test_suite %#
pytest = "^7.4.3"
coverage = "^7.3.2"
#%- endif %#
poethepoet = "^0.24.3"
#%- if use_precommit %#
pre-commit = "^3.5.0"
#%- endif %#
#%- if visibility == "public" and test_suite %#
smokeshow = "^0.4.0"
#%- endif %#

#% if docs %#
[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
markdown-exec = ">=1.3.0"
mkdocs-material = ">=8.2,<10.0.0"
mkdocstrings = { version = ">=0.19.0", extras = ["python"] }
#%- endif %#

[tool.poe.tasks]
#%- if test_suite %#
test = "pytest -v"
#%- endif %#
lint = "ruff check ."
lock = "scripts/lock.sh"
bump = "scripts/bump.sh"
check = [
    #%- if test_suite %#
    { ref="test" },
    #%- endif %#
    { ref="lint" },
    { ref="lock" }
]
release.script = "scripts.release:main"

[tool.ruff]
exclude = ["tests/", "scripts/"]
# To discuss the presented rationales, contact the author ({{github_username}}).
select = ["ALL"]
ignore = [
    # Description: Missing type annotation for self in method
    # Rationale: It is mostly redundant, as is for ANN102.
    "ANN101",

    # Description: Missing type annotation for cls in method
    # Rationale: It is mostly redundant, as is for ANN101.
    "ANN102",

    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` disables
    #  type checking completely.
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred.
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred.
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project.
    "FIX002",
]

[tool.mypy]
strict = true

[tool.isort]
profile = "black"

[tool.coverage.report]
omit = ["tests/*"]
# fail_under = 96
exclude_also = [
    # Be sure to include lines that are not meant to be covered
    # by tests or encountered by the users at runtime.
    "raise NotImplementedError",          # Do not cover abstract methods.
    "if ((t|typing)\\.?)?TYPE_CHECKING:", # Do not cover type checking imports.
    "@((t|typing)\\.?)?overload",         # Do not cover overload definitions.
    "\\(((t|typing)\\.?)?Protocol\\):$",  # Do not cover entire protocol definitions.
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
