repo_name:
  type: str
  help: Repository name
project_description:
  type: str
  default: ""
  help: Short project description
visibility:
  type: str
  choices:
    - public
    - private
  help: Repository visibility
github_username:
  type: str
  default: bswck
  help: Your GitHub username
pypi_project_name:
  type: str
  default: "{{ repo_name.lower().replace('_', '-') }}"
  help: PyPI project name
  when: "{{ visibility == 'public' }}"
pypi_project_description:
  type: str
  default: "{{ project_description }}"
  help: PyPI project description
  when: "{{ visibility == 'public' }}"
author_full_name:
  type: str
  default: Bartosz SÅ‚awecki
  help: Your full name
email_address:
  type: str
  default: bswck.dev@gmail.com
  help: Your e-mail address
package_name:
  type: str
  default: "{{ repo_name.replace('-', '_') }}"
  help: Package import name
project_version:
  type: str
  default: "0.0.1"
  help: Initial project version
python_version:
  type: str
  default: "3.8"
  choices:
    - "3.8"
    - "3.9"
    - "3.10"
    - "3.11"
    - "3.12"
  help: Minimal Python version
license_name:
  type: str
  default: MIT
  choices:
    "MIT License": MIT
    "GNU Affero General Public License v3.0": AGPL-3.0
    "Apache License 2.0": Apache-2.0
    'BSD 2-Clause "Simplified" License': BSD-2-Clause
    'BSD 3-Clause "New" or "Revised" License': BSD-3-Clause
    "Boost Software License 1.0": BSL-1.0
    "Creative Commons Zero v1.0 Universal": CC0-1.0
    "Eclipse Public License 2.0": EPL-2.0
    "GNU General Public License v2.0": GPL-2.0
    "GNU General Public License v3.0": GPL-3.0
    "GNU Lesser General Public License v2.1": LGPL-2.1
    "Mozilla Public License 2.0": MPL-2.0
    "The Unlicense": Unlicense
    "No license": None
  help: License name
_tasks:
  - |-
    echo "Checking if this directory is a git repository..."
    git rev-parse --is-inside-work-tree
    if [ $? -e 0 ]; then  # $OPERATION=copy
        git init .
        poetry install
        if [ $? -eq 0 ]; then
            echo "Successfully installed dependencies."
        else
            echo "Failed to install dependencies."
            exit 1
        fi
        PYTHON_VERSION="$(cat .python-version)"
        poetry env use $PYTHON_VERSION
        poetry run poe lock
        poetry run python _after_copy.py
        rm _after_copy.py
        git add .
        git commit -m "Initial commit"
        gh repo create {{ repo_name }} --{{ visibility }} --source=./ --remote=upstream
        git remote add origin https://github.com/{{ github_username }}/{{ repo_name }}.git
        git push -u origin master
        poetry run pre-commit install --hook-type pre-commit --hook-type pre-push
    else  # $OPERATION=update
        echo "This directory is a git repository."
    fi
