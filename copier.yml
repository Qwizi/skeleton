_subdirectory: project
_exclude:
  - copier.yaml
  - copier.yml
  - ~*
  - "*.py[co]"
  - __pycache__
  - .git
  - .DS_Store
  - .svn
  - "{% if publish_on_pypi %}release.yml.jinja{% endif %}"
_tasks:
  - |-
    echo "Checking if this directory is a git repository..."
    if test "$(git rev-parse --show-toplevel)" != "$(pwd)"; then { # $OPERATION=copy
        echo "This directory is not a git repository."
        git init .
        git add .
        {% include '_poetry_setup_task.sh' %}
        {% include '_copier_hook_task.sh' %}
        git commit -m "Initial commit"
        git branch -M {{main_branch}}
        gh repo create {{repo_name}} --{{visibility}} --source=./ --remote=upstream
        git remote add origin https://github.com/{{github_username}}/{{repo_name}}.git
        git push -u origin {{main_branch}}
        poetry run pre-commit install --hook-type pre-commit --hook-type pre-push
    } else {  # $OPERATION=update
        if test "$(git status --porcelain)"; then {
            echo "This directory is a git repository with uncommitted changes."
            echo "Stashing changes..."
            git stash
            STASHED=true
        }
        {% include '_poetry_setup_task.sh' %}
        {% include '_copier_hook_task.sh' %}
        echo "This directory is a git repository."
        git add .
        git commit -m "Infrastructure update from https://github.com/{{github_username}}/{{repo_name}}/tree/{{_vsc_ref}}"
        git push
        if test "$STASHED"; then {
            echo "Unstashing changes..."
            git stash pop
        } fi
    } fi

repo_name:
  type: str
  help: Repository name
project_description:
  type: str
  default: ""
  help: Short project description
visibility:
  type: str
  choices:
    - public
    - private
  help: Repository visibility
github_username:
  type: str
  default: bswck
  help: Your GitHub username
publish_on_pypi:
  type: bool
  default: true
  help: Publish on PyPI
pypi_project_name:
  type: str
  default: "{{ repo_name.lower().replace('_', '-') }}"
  help: PyPI project name
  when: "{{publish_on_pypi}}"
pypi_project_description:
  type: str
  default: "{{project_description}}"
  help: PyPI project description
  when: "{{publish_on_pypi}}"
author_full_name:
  type: str
  default: Bartosz SÅ‚awecki
  help: Your full name
email_address:
  type: str
  default: bswck.dev@gmail.com
  help: Your e-mail address
package_name:
  type: str
  default: "{{ repo_name.replace('-', '_') }}"
  help: Package import name
project_version:
  type: str
  default: "0.0.1"
  help: Initial project version
python_version:
  type: str
  default: "3.8"
  choices:
    - "3.8"
    - "3.9"
    - "3.10"
    - "3.11"
    - "3.12"
  help: Minimal Python version
license_name:
  type: str
  default: MIT
  choices:
    "MIT License": MIT
    "GNU Affero General Public License v3.0": AGPL-3.0
    "Apache License 2.0": Apache-2.0
    'BSD 2-Clause "Simplified" License': BSD-2-Clause
    'BSD 3-Clause "New" or "Revised" License': BSD-3-Clause
    "Boost Software License 1.0": BSL-1.0
    "Creative Commons Zero v1.0 Universal": CC0-1.0
    "Eclipse Public License 2.0": EPL-2.0
    "GNU General Public License v2.0": GPL-2.0
    "GNU General Public License v3.0": GPL-3.0
    "GNU Lesser General Public License v2.1": LGPL-2.1
    "Mozilla Public License 2.0": MPL-2.0
    "The Unlicense": Unlicense
    "Custom license/No license": Custom
  help: License name
main_branch:
  type: str
  default: master
  help: Main branch name
